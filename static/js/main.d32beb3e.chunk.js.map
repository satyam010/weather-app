{"version":3,"sources":["app_component/form.component.js","app_component/weather.component.js","App.js","serviceWorker.js","index.js"],"names":["error","props","Form","onSubmit","loadweather","type","placeholder","name","autoComplete","Weather","cityname","temp_celsius","description","charAt","toUpperCase","slice","App","getWeather","e","a","preventDefault","city","target","elements","value","fetch","api_call","json","response","setState","celsius","calCelsius","main","temp","weather","state","undefined","Math","floor","className","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAsBMA,G,MAAQ,SAAAC,GACZ,OACI,2DAISC,EA1BF,SAAAD,GACX,OACE,6BACE,0BAAME,SAAUF,EAAMG,aACpB,6BAAMH,EAAMD,MAAQA,IAAU,IAE1B,2BACEK,KAAK,OACLC,YAAY,OACZC,KAAK,OACLC,aAAa,QAGf,uDCMGC,EAlBC,SAAAR,GACd,OAEM,6BACA,4BAAKA,EAAMS,UAGVT,EAAMU,aAAiB,4BAAMV,EAAMU,aAAZ,QAAuC,KAG/D,4BACGV,EAAMW,YAAYC,OAAO,GAAGC,cAAgBb,EAAMW,YAAYG,MAAM,MCoDhEC,E,YAzDb,aAAe,IAAD,8BACZ,+CAiBFC,WAlBc,uCAkBD,WAAMC,GAAN,mBAAAC,EAAA,yDACXD,EAAEE,mBAEIC,EAAOH,EAAEI,OAAOC,SAASF,KAAKG,OAHzB,iCAMcC,MAAM,oDAAD,OAAqDJ,EAArD,kBA3BlB,qCAqBD,cAMHK,EANG,gBAQcA,EAASC,OARvB,OAQHC,EARG,OAUT,EAAKC,SAAS,CACZR,KAAMO,EAASrB,KACfuB,QAAS,EAAKC,WAAWH,EAASI,KAAKC,MACvCrB,YAAagB,EAASM,QAAQ,GAAGtB,YACjCZ,OAAO,IAdA,wBAmBT,EAAK6B,SAAS,CACZ7B,OAAO,IApBA,4CAlBC,sDAEZ,EAAKmC,MAAQ,CACXd,UAAMe,EACNJ,UAAMI,EACNN,aAASM,EACTxB,YAAa,GACbZ,OAAO,GAPG,E,wEAaHiC,GAET,OADWI,KAAKC,MAAML,EAAO,U,+BA8B7B,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,CAAMnC,YAAaoC,KAAKvB,WAAYjB,MAAOwC,KAAKL,MAAMnC,QACtD,kBAAC,EAAD,CACEU,SAAU8B,KAAKL,MAAMd,KACrBV,aAAc6B,KAAKL,MAAML,QACzBlB,YAAa4B,KAAKL,MAAMvB,mB,GAnDhB6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d32beb3e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => {\n  return (\n    <div >\n      <form onSubmit={props.loadweather}>\n        <div>{props.error ? error() : \"\"}</div>\n        \n            <input\n              type=\"text\"\n              placeholder=\"City\"\n              name=\"city\"\n              autoComplete=\"off\"\n            />\n          \n            <button>Get Weather info</button>\n       \n      </form>\n    </div>\n  );\n};\n\nconst error = props => {\n  return (\n      <p>Please Enter City Name...!</p>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\n\nconst Weather = props => {\n  return (\n        \n        <div>\n        <h1>{props.cityname}</h1>\n\n        {/* Get Celsius */}\n        {props.temp_celsius ? ( <h1 >{props.temp_celsius}&deg;</h1>) : null}\n\n        {/* Weather description */}\n        <h4>\n          {props.description.charAt(0).toUpperCase() + props.description.slice(1)}\n        </h4>\n        </div>\n     \n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./app_component/form.component\";\nimport Weather from \"./app_component/weather.component\";\n\n\nconst Api_Key = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      main: undefined,\n      celsius: undefined,\n      description: \"\",\n      error: false\n    };\n\n  }\n\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async(e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    if (city) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${Api_Key}`);\n\n      const response = await api_call.json();\n\n      this.setState({\n        city: response.name,\n        celsius: this.calCelsius(response.main.temp),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      \n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.state.city}\n          temp_celsius={this.state.celsius}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}